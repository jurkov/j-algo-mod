/* Generated By:JavaCC: Do not edit this line. EbnfParser.java */
package org.jalgo.module.ebnf.controller.ebnf.parser;

import org.jalgo.module.ebnf.model.ebnf.*;
import org.jalgo.module.ebnf.controller.ebnf.EbnfController;

/** This is the parser for EBNF terms. It is automatically created by JavaCC
 * 
 */
public class EbnfParser implements EbnfParserConstants {

        private EbnfController ebnfController;

        public EbnfParser(EbnfController ebnfController, String term) {
                this.ebnfController = ebnfController;
                java.io.StringReader sr = new java.io.StringReader( term );
                java.io.Reader r = new java.io.BufferedReader( sr );
                jj_input_stream = new SimpleCharStream(r, 1, 1);
                token_source = new EbnfParserTokenManager(jj_input_stream);
                token = new Token();
                jj_ntk = -1;
                jj_gen = 0;
                for (int i = 0; i < 6; i++) jj_la1[i] = -1;
                for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }


        /**
     * 
     * @param symbols a String with parsed symbols
     * @return a concatenation (or a simple term) of all terminal symbols and variables that are valid for this ebnf definition.
     */
    private Term parseSymbols(String symbols) throws ParseException {
        java.util.List<Term> termList = new java.util.ArrayList<Term>();
        boolean changed = true;
        while (!symbols.equals("") && changed==true) {
            changed = false;
            for (EVariable var : ebnfController.getDefinition().getVariables()) {
                    if (symbols.startsWith(var.getName())) {
                            termList.add(var);
                            symbols = symbols.substring(var.getName().length());
                            changed = true;
                    }
            }
            for (ETerminalSymbol terminal : ebnfController.getDefinition().getTerminals()) {
                    if (symbols.startsWith(terminal.getName())) {
                            termList.add(terminal);
                            symbols = symbols.substring(terminal.getName().length());
                            changed = true;
                    }
            }
                if (!symbols.equals("") && changed==false) {
                       changed = ebnfController.getGuiController().showUnknownSymbolDialog(symbols);

                }
        }
        if (!symbols.equals("")) throw new ParseException();
        Term t = null;
        try {
                if (termList.size() == 1) {
                        t = termList.get(0);
                } else {
                        t = new EConcatenation(termList);
                }
        } catch (DefinitionFormatException e) {
                throw new ParseException();
        }
        return t;
    }

  final public Term parse() throws ParseException {
  Term term;
    term = term();
    jj_consume_token(0);
                {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

  final public Term term() throws ParseException {
  Token t; Term term; Term term2 = null;
    if (jj_2_1(2)) {
      term = repetition();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case L_REPETITION:
      case L_PARENTHESES:
      case L_OPTION:
      case TERM:
        term2 = term();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
                if (term2!=null) {
                        try {
                                term = new EConcatenation(term, term2);
                        } catch (Exception e) {
                                {if (true) throw new ParseException();}
                        }
                }
                {if (true) return term;}
    } else if (jj_2_2(2)) {
      term = parentheses();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case L_REPETITION:
      case L_PARENTHESES:
      case L_OPTION:
      case TERM:
        term2 = term();
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
                if (term2!=null) {
                        try {
                                term = new EConcatenation(term, term2);
                        } catch (Exception e) {
                                {if (true) throw new ParseException();}
                        }
                }
                {if (true) return term;}
    } else if (jj_2_3(2)) {
      term = option();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case L_REPETITION:
      case L_PARENTHESES:
      case L_OPTION:
      case TERM:
        term2 = term();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
                if (term2!=null) {
                        try {
                                term = new EConcatenation(term, term2);
                        } catch (Exception e) {
                                {if (true) throw new ParseException();}
                        }
                }
                {if (true) return term;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TERM:
        t = jj_consume_token(TERM);
                term = parseSymbols(t.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case L_REPETITION:
        case L_PARENTHESES:
        case L_OPTION:
        case TERM:
          term2 = term();
          break;
        default:
          jj_la1[3] = jj_gen;
          ;
        }
                if (term2!=null) {
                        try {
                                term = new EConcatenation(term, term2);
                        } catch (Exception e){
                                {if (true) throw new ParseException();}
                        }
                }
                {if (true) return term;}
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public java.util.List<Term> specialTerm() throws ParseException {
        Term term;
        java.util.List<Term> terms = new java.util.ArrayList<Term>();
        java.util.List<Term> subTerms = new java.util.ArrayList<Term>();
    term = term();
                terms.add(term);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BRANCH:
      jj_consume_token(BRANCH);
      subTerms = specialTerm();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
                terms.addAll(subTerms);
                {if (true) return terms;}
                {if (true) return terms;}
    throw new Error("Missing return statement in function");
  }

  final public Term repetition() throws ParseException {
  Term term;
    jj_consume_token(L_REPETITION);
    term = term();
    jj_consume_token(R_REPETITION);
                ERepetition rep = null;
                try {
                        rep = new ERepetition(term);
                } catch (Exception e) {
                        {if (true) throw new ParseException();}
                }
                {if (true) return rep;}
    throw new Error("Missing return statement in function");
  }

  final public Term parentheses() throws ParseException {
  java.util.List<Term> subTerms;
    jj_consume_token(L_PARENTHESES);
    subTerms = specialTerm();
    jj_consume_token(R_PARENTHESES);
          if (subTerms.size() == 1){
                ECompoundTerm ct = null;
                try {
                        ct = new ECompoundTerm(subTerms.get(0));
                } catch (Exception e) {
                        {if (true) throw new ParseException();}
                }
                {if (true) return ct;}
        } else {
                EAlternative alt = null;
                try {
                        alt = new EAlternative(subTerms);
                } catch (Exception e) {
                        {if (true) throw new ParseException();}
                }
                {if (true) return alt;}
                }
    throw new Error("Missing return statement in function");
  }

  final public Term option() throws ParseException {
  Term term;
    jj_consume_token(L_OPTION);
    term = term();
    jj_consume_token(R_OPTION);
                EOption opt = null;
                try {
                        opt = new EOption(term);
                } catch (Exception e) {
                        {if (true) throw new ParseException();}
                }
                {if (true) return opt;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_3R_1() {
    if (jj_scan_token(L_REPETITION)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_3()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_1()) return true;
    return false;
  }

  final private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_6()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_3() {
    if (jj_scan_token(L_OPTION)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  final private boolean jj_3R_2() {
    if (jj_scan_token(L_PARENTHESES)) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_2()) return true;
    return false;
  }

  final private boolean jj_3R_6() {
    if (jj_scan_token(TERM)) return true;
    return false;
  }

  final private boolean jj_3R_5() {
    if (jj_3R_4()) return true;
    return false;
  }

  public EbnfParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x12a0,0x12a0,0x12a0,0x12a0,0x1000,0x800,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public EbnfParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public EbnfParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new EbnfParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public EbnfParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new EbnfParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public EbnfParser(EbnfParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(EbnfParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector<int[]> jj_expentries = new java.util.Vector<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[13];
    for (int i = 0; i < 13; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 13; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
