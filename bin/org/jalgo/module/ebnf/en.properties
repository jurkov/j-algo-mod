Module_name=EBNF / Syntax-Diagramme
Module_version=1.0
Module_authors=Tom Kazimier, Johannes Mey, Michael Thiele, André Viergutz, Claas Wilke
Module_license=GNU General Public License
Module_description_1=This module handles EBNF definitions and syntax diagrams.
Module_description_2=The trans() algorithm and interactvive word creation are supported.

ModuleConnector.No_valid_EBNF_file=This is not a valid EBNF definition or syntax diagram file.
ModuleConnector.Loading_error=Error loading the file.
ModuleConnector.File_damaged=The file is possibly damaged.
GUIController.Wish_to_change_to_EBNF_mode=Do you want to switch to EBNF mode?

Show_start_screen=Show selcome screen
Show_start_screen_tooltip=Shows the selcome screen
Wish_to_discard=Do you wish to discard your changes?
Wish_to_show_Startscreen=Do you really want to show the start screen?

SynDiaModel.NoNullElemException=Error inserting into the diagram: At the given index is no null element
SynDiaModel.BeginEndException=begin - end < 0 or (begin - end) % 2 != 0
SynDiaModel.LeftAndRightPathException=It is impossible to keep the the upper or lower path when deleting a branch or repetition
SynDiaModel.ElementNotFoundException=There is no removable element at this position!
SynDiaModel.DeleteStartDiagramException=The start diagram can not be removed!
SynDiaModel.EmptyNameExeption=Variable and terminal symbol names must not be empty!

Trans.UndoAll=Undo all steps
Trans.Undo=Undo the last step
Trans.Perform=Perform the next possible step
Trans.PerformAll=Complete the algorithm
Trans.ShowHelp=Switch accentuation of the next algorithm step on/off

Trans.Finished=The algorithm has finished
Trans.Beachte_top=Attention: Enter the repetition at the right side!
Trans.Beachte_bottom=
Trans.Sei=Be
Trans.FirstAd=Move the mouse over a trans()-element
Trans.SecondAd=By clicking this, the next transformation step will be performed

Border_Control=control area
Border_Draw=diagram display
Border_Explanation=algorithm advices

SynDia.Control_FitToSize=automatically fit to size on/off
SynDia.Control_Stairs=show/hide stairs in syntax diagrams
SynDia.Control_ToEbnf=<html><center>View/edit<br>EBNF definition</center></html>
SynDia.Control_ToSynDiaDisplay=<html><center>To syntax<br>diagram display</center></html>
SynDia.Control_ToSynDiaInput=<html><center>To syntax<br>diagram editor</center></html>
SynDia.Control_ToWordAlgo=<html><center>To word<br>algorithm</center></html>
SynDia.Control_Save=Asvise
SynDia.Control_SaveText=Would you like to save the diagram before starting the algorithm?

Ebnf.Controller_DefinitionCheck_NoStartVar=ERROR: the definition has no start variable<br>
Ebnf.Controller_DefinitionCheck_NoRuleForVar_1=ERROR: The variable 
Ebnf.Controller_DefinitionCheck_NoRuleForVar_2=has no associated rule<br>
Ebnf.Controller_DefinitionCheck_NoTermWithVar_1=WARNING: The variable 
Ebnf.Controller_DefinitionCheck_NoTermWithVar_2=appears in no term of any rule<br>
Ebnf.Controller_DefinitionCheck_NoTermWithTS_1=WARNING: The terminal symbol
Ebnf.Controller_DefinitionCheck_NoTermWithTS_2=appears in no term of any rule<br>
Ebnf.Controller_DefinitionCheck_RuleNotReachable_1=WARNING: The rule 
Ebnf.Controller_DefinitionCheck_RuleNotReachable_2=can not be reached<br>
Ebnf.Controller_DefinitionCheck_NotBinaryAlt=WARNING: The definition includes not binary bracketed alternative rules<br>
Ebnf.Controller_MakeDefinitionStrictError=ERROR: The definition could not be bracketed binary!

Ebnf.ChoicePanel_EbnfNotBinary=<html>The definition hast not been<p>made binary yet! This is<br>necessary to execute trans()!</html>
Ebnf.ChoicePanel_EbnfIsBinary=<html>The definition is bracketed binary.<p>The trans() algorithm<p> could be started.</html>
Ebnf.ChoicePanel_Border=Please choose...
Ebnf.ChoicePanel_transNotActiveButton=<html><center>Do<br>trans() algorithm</center></html>
Ebnf.ChoicePanel_transActiveButton=<html><center>Back to<br>trans() algorithm</center></html>
Ebnf.ChoicePanel_editButton=<html><center>Overwork<br>definition</center></html>
Ebnf.ChoicePanel_strictButton=<html><center>Bracket<br>definition binary</center></html>
Ebnf.ChoicePanel_strictButton2=<html><center>Remove binary<br>binary brackets</center></html>
Ebnf.ChoicePanel_SaveStrictMode=Do you wish to save the binary brackets in your definition?
Ebnf.ChoicePanel_StrictMode=Keep binary brackets

Ebnf.PopupMenu_Edit=Edit
Ebnf.PopupMenu_Rename=Rename
Ebnf.PopupMenu_Delete=Delete
Ebnf.PopupMenu_SetAsStartRule=Set as start rule
Ebnf.PopupMenu_SetAsStartVar=Set as start variable

Ebnf.DefinitionCorrect=The definition is correct and complete.
Ebnf.CheckDefinition=Check of definition
Ebnf.Add=Add
Ebnf.Edit=Edit
Ebnf.Undo=Undo
Ebnf.33=Symbol:
Ebnf.Change=Change
Ebnf.Cancel=Cancel
Ebnf.Insert=Insert
Ebnf.cancel=Cancel
Ebnf.Input_StartVar=start variable

Ebnf.Input_Undo=Undoes the latest change
Ebnf.Input_Redo=Redo

Ebnf.RuleIsCorrect=<html>The rule you inserted is accurate.</html>

Ebnf.Input_CheckDefinitionButton=<html><center>Check<br>definition</center></html>
Ebnf.Input_InputFinishedButton=<html><center>Input<br>finished</center></html>
Ebnf.Input_RulesBorder=Rules
Ebnf.Input_TerminalBorder=Terminal symbols

Ebnf.Input_Undo=Undoes the last action.
Ebnf.Input_Redo=Redoes the last action.
Ebnf.terminal=Terminal symbol
Ebnf.variable=Variable
Ebnf.symbol=The Symbol
Ebnf.isUnknown=could not be assigned properly.<br>It is possible to assign it to a set of the definition.

Ebnf.Error_NoValidVarName=ERROR: Illegal variable name!
Ebnf.Error_NoValidTermrName=ERROR: Illegal terminalsymbol name!
Ebnf.Error_NoValidRule=ERROR: The entered rule is illegal!

Ebnf.Error.Error=ERROR:
Ebnf.FurtherChars=further special characters
Ebnf.Error.Undefined=ERROR: Operation could not be done!
Ebnf.Error.StartVarNull=ERROR: A variable of the definition must be set as start variable!
Ebnf.Error.StartVarNotInDef=ERROR: The new start variable is not part of the definition!
Ebnf.Error.InvalidNameInDef=could not be added to the definition because of an overlapping with other symbols!
Ebnf.Error.InvalidSymbolName=is no valid symbol name!
Ebnf.Error.SymbolOccoursInRule=still occurs in rules and could therefore not be deleted!!
Ebnf.Error.NotASymbol=is no symbol of the definition
Ebnf.Error.NotATerminalSymbol=is no terminal symbol
Ebnf.Error.NotAVariable=is no variable
Ebnf.Error.NotARuleReplace=ERROR: The rule is not part of the definition and could therefore not be replaced!
Ebnf.Error.RuleIsNull=ERROR: The rule is empty and could therefore not be added!
Ebnf.Error.RuleAlreadyExists=ERROR: There is already a rule for this variable!
Ebnf.Error.ReplacementRuleIsNull=ERROR: The new rule is empty and can't therefore replace the old one!
Ebnf.Error.Replacement=The rule can not be replaced:
Ebnf.Error.ParseError=ERROR: The rule is invalid!
Ebnf.Error.BracketError=ERROR: The rule ist not bracketed properly!
Ebnf.Error.AlternativeError=ERROR: An alternative bar occurs outside of a a pair of parentheses!
Ebnf.Error.StillErrorsInDef=Unfortunately there are still mistakes in your definition:
Ebnf.Error.SaveError=An error occured on saving the definiton
Ebnf.Error.LoadError=An error occured on loading the definitonn
Ebnf.Error.LoadErrorInvalidDef=The chosen file does not include a valid EBNF definition

Ebnf.Error.UndoImpossible=Unfortunately the undo of this action is not possible 
Ebnf.Error.RedoImpossible=Unfortunately the redo of this action is not possible

General.Error.LoadError=An error occured on loading the syntax diagram system

SynDia.Error.SaveError=An error occured on saving the syntax diagram system
SynDia.Error.LoadError=An error occured on loading the syntax diagram system
SynDia.Error.LoadErrorInvalidDef=The file does not contain a valid syntax diagram system

SynDiaEditor.Error_InternalError=An error occured on editing the syntax diagram system.
SynDiaEditor.Error_Appendix=It is recommended to close the active module and to reload an older save point.

SynDiaEditor.PopupNote_Border=Hint
SynDiaEditor.PopupNote_DoNotDeleteStartDiagram=<html><center>The start diagram<br>must not be deleted!</center></html>
SynDiaEditor.PopupIncomplete_Top=<html><center>These variables do<br>not have a diagram:</center></html>

SynDiaEditor.NameOfDiagram=name of the diagram
SynDiaEditor.ChangeNameOfDiagram=no empty name please
SynDiaEditor.DiagramAlreadyExists=name already exists

SynDiaEditor.Undo=undoes last action
SynDiaEditor.Redo=redoes last undone action

SynDiaEditor.ToolTip_AddSynDia=insert a new syntax diagram
SynDiaEditor.ToolTip_Edit=edit syntax diagrams, variables and terminal symbol names
SynDiaEditor.ToolTip_Delete=delete syntax diagram elements and empty diagrams
SynDiaEditor.ToolTip_AddTerminal=insert a terminal symbol at a rhombus
SynDiaEditor.ToolTip_AddVariable=insert a variable at a rhombus
SynDiaEditor.ToolTip_AddBranch=insert a branch: 1st click fixes beginning; 2nd click the end
SynDiaEditor.ToolTip_AddRepetition=insert a repetition: 1st click fixes beginning; 2nd click the end

WordAlgo.BgName=word

WordAlgo.Explanation_BeforeStart=Enter a word you want to generate and click the button 'Start algorithm' to start the algorithm. You can also start the algorithm without entering a word. 
WordAlgo.Explanation_AlgorithmStart=Before the algorithm starts, each variable gets its own return adress. The algorithm starts at the beginning of the start diagram.
WordAlgo.Explanation_JumpToDiagram=Jump to the diagram which has the same name than the left variable.
WordAlgo.Explanation_LeaveDiagram=The algorithm has left the diagram.
WordAlgo.Explanation_LeaveDiagramWithAdress=If there is still a return adress on the stack, click the return adress from the variable which return adress equals the highest adress on the stack.
WordAlgo.Explanation_LeaveDiagramFinishWithSuccess=There is no return adress on the stack anymore and the exit of the start diagram has been reached. The algorithm terminates with success.
WordAlgo.Explanation_LeaveDiagramFinishWithoutSuccess=There is no return adress on the stack anymore, but the exit of the start diagram has not been reached. The algorithm terminates without succes.
WordAlgo.Explanation_LeaveDiagramFinishWithoutSuccess2=Ther is no return adress on the stack anymore, but the enterred word wasn't generated. The algorithm terminates without success.
WordAlgo.Explanation_ReturnToDiagram=The return adress was popped from the stack. The algorithm returned to the diagram.
WordAlgo.Explanation_Split=
WordAlgo.Explanation_Terminal=The symbol of the terminal symbol was added to the output.
WordAlgo.Explanation_Variable=The return adress of the variable was pushed onto the stack.\nClick onto the syntax diagram which has the same name than the left Variable to jump to the diagram.
WordAlgo.Explanation_ContinueDiagram=Click on a terminal symbol, a variable or a empty branch to continue the way through the syntax diagram. 

WordAlgo.Warning_JumpToDiagram=The name of the clicked diagram does not euqal to the name of the left variable. The jump was not performed.
WordAlgo.Warning_ReturnToDiagram=The clicked return adress does not equal to the name of the highest return adress on the stack. The return was not performed.
WordAlgo.Warning_Terminal=The generated output can not become the entered word anymore. Algorithm terminates without success.
WordAlgo.Warning_WordNotValid=The entered word is not valid.
WordAlgo.Warning_WordNotValidToolTip=A valid word can only contain terminal symbols which are also in at least on of the syntax diagrams.

WordAlgo.MouseOver_Variable=This variable can be reached. Click to go to the variable.
WordAlgo.MouseOver_ReturnAdress=Click to return to this return adress.
WordAlgo.MouseOver_Terminal=This terminal symbol can be reached. Click to pass the terminal symbol.
WordAlgo.MouseOver_Diagram=Click, to jump to this syntax diagram.
WordAlgo.MouseOver_DiagramExit=The exit of the syntax diagram can be reached. Click to leave the diagram.
WordAlgo.MouseOver_Split=This branch can be reached. Click to pass the branch.

WordAlgo.GuiControlPanel_Description=Control
WordAlgo.GuiControlPanel_StartLabel=<html><center>Start<br>algorithm</center></html>
WordAlgo.GuiControlPanel_StopLabel=<html><center>Reset<br>algorithm</center></html>
WordAlgo.GuiControlPanel_RandomWordLabel=<html><center>Generate a<br>random word</center></html>
WordAlgo.GuiControlPanel_StartTooltip=Starts the algorithm.
WordAlgo.GuiControlPanel_StopTooltip=Resets the algorithm to the beginning.
WordAlgo.GuiControlPanel_RandomWordTooltip=Generates a random word which can be also generated by the algorithm.
WordAlgo.GuiControlPanel_FinishSuccess=The algorithm terminated successfully.
WordAlgo.GuiControlPanel_FinishUnsuccess=The algorithm terminated unsuccessfully.
WordAlgo.GuiControlPanel_RandomWordError=Error during word generation.

WordAlgo.GuiExplanationPanel_Description=Explanation
WordAlgo.GuiStackPanel_Description=Stack

WordAlgo.ToolBar_Undo=Undo the last step
WordAlgo.ToolBar_Redo=Redo the last step

WordAlgo.Menu_Title=Word-Algorithm
WordAlgo.Menu_Start=Start algorithm
WordAlgo.Menu_Reset=Reset algorithm
WordAlgo.Menu_Undo=Undo the last step
WordAlgo.Menu_Redo=Redo the last step
WordAlgo.Menu_UndoAll=Undo all steps
WordAlgo.Menu_RedoAll=Redo all steps
WordAlgo.Menu_Exit=Leave algorithm
InputPanel.next=Nect
InputPanel.Variables=Variablen
InputPanel.insertlpar=add (