Add.0=Stack does not contain 2 or more values.
Add.1=if <i>d</i>=<i>d</i>.1:<i>d</i>.2:<i>d</i>.3: ... :<i>d</i>.n with n \u2265 2 then (<i>m</i>+1,(<i>d</i>.2+<i>d</i>.1):<i>d</i>.3: ... :<i>d</i>.n,<i>h</i>, <i>inp</i>, <i>out</i>)
AddressSolver.0=A StubTrans must not have a null address
AM0InputDialog.0=New abstract machine configuration
AM0InputDialog.1=PC
AM0InputDialog.12=Add
AM0InputDialog.13=Delete
AM0InputDialog.14=<html>Enter a new machine configuration here.<br> Use ':' to separate values in the stack<br>and ',' to seperate values in the input- and output stream.<br><br><html>
AM0InputDialog.15=OK
AM0InputDialog.16=Cancel
AM0InputDialog.17=Initial configuration
AM0InputDialog.18=This ram element is not valid. It should not be empty\!
AM0InputDialog.19=This ram element is not valid.\n
AM0InputDialog.2=Stack (Separated with ':')
AM0InputDialog.20=Please check this numbers:\n
AM0InputDialog.21=Address: 
AM0InputDialog.24=This ram element is not valid.\n
AM0InputDialog.25=The address should not be negative or 0 but it was:\n
AM0InputDialog.26=This ram address is not valid.\n
AM0InputDialog.27=\ Please check this address:
AM0InputDialog.28=This ram address is not valid.\n
AM0InputDialog.29=\ The address should not be negative or 0 but it was:\n
AM0InputDialog.3=RAM (Address, Value)
AM0InputDialog.4=Input (Separated with ',')
AM0InputDialog.43=at least there should be one number 
AM0InputDialog.44=or more separated with ',' but it was:\n
AM0InputDialog.45=This input stream is not valid. Multiple '-' per number are not allowed and\n
AM0InputDialog.46=at least there should be one number 
AM0InputDialog.47=or more separated with ',' but it was:\n
AM0InputDialog.48=This stack is not valid. Multiple '-' per number are not allowed and\n
AM0InputDialog.49=at least there should be one number 
AM0InputDialog.5=Output (Separated with ',')
AM0InputDialog.50=or more separated with ':' but it was:\n
AM0InputDialog.51=This program counter is not valid.\nIt has to be a number greater or equals 1 but it was:\n
AM0InputDialog.52=It is not allowed to the leave the program counter empty\!
AM0InputDialog.6=Value: 
AM0InputDialog.7=This output stream is not valid. Multiple '-' per number are not allowed and\n
AM0InputDialog.74=RAM Configuration
AM0InputDialog.8=This address exists already. Do you want to override the value for this address?
AM0InputDialog.87=Stack Configuration
AM0InputDialog.9=This address did not exists:\n
AM0PagingTableModel.0=PC
AM0PagingTableModel.1=Stack
AM0PagingTableModel.10=<html>&nbsp;&nbsp;Showing steps from <b>
AM0PagingTableModel.11=</b> to <b>
AM0PagingTableModel.12=</b></html>
AM0PagingTableModel.2=Ram
AM0PagingTableModel.3=Input
AM0PagingTableModel.4=Output
AM0PagingTableModel.7=<html>&nbsp;&nbsp;Showing steps from <b>
AM0PagingTableModel.8=</b> to <b>
AM0PagingTableModel.9=</b></html>
AM0Scanner.0=Unknown internal scanner error
AM0Scanner.1=Error: could not match input
AM0Scanner.2=Error: pushback value was too large
AtomicTrans.0=This AtomicType is not valid
AtomicTrans.5=token must be null for AtomicTrans functions
AtomicTrans.6=A jump statement must have a jumpAddress
AtomicTrans.7=Applying AtomicTrans is not allowed.
BlockTrans.0=blocktrans: W(<Block>) \u2212 \u2192 bProg0\n\n
BlockTrans.1=blocktrans({ decl statseq return 0;}) := stseqtrans(statseq, update(decl, tab \u2205 ), 1)
BlockTrans.2=for all decl \u2208 W(<Declaration>) and statseq \u2208 W(<StatementSequence>),
BlockTrans.3=tab \u2205 \u2208 Tab with graph(tab \u2205 ) = \u2205
BoolExpTrans.0=boolexptrans: W(<BoolExpression>) \u00D7 Tab\u2212 \u2192 bProg0\n\n
BoolExpTrans.1=boolexptrans(se 1 rel se 2 , tab) :=\n
BoolExpTrans.2=\tsimpleexptrans(se 1 , tab)\n
BoolExpTrans.3=\tsimpleexptrans(se 2 , tab)\n
BoolExpTrans.4=\tREL;\n
BoolExpTrans.5=for all se 1 , se 2 \u2208 W(<SimpleExpression>), rel \u2208 {==, \!=, <, >, <=, >=} and tab \u2208 Tab
C0Scanner.0=Error: pushback value was too large
C0Scanner.177=Unknown internal scanner error
C0Scanner.178=Error: could not match input
Div.0=Stack does not contain 2 or more values.
Div.1=Division by zero.
Div.2=if <i>d</i>=<i>d</i>.1:<i>d</i>.2:<i>d</i>.3: ... :<i>d</i>.n with n \u2265 2 then (<i>m</i>+1,(<i>d</i>.2/<i>d</i>.1):<i>d</i>.3: ... :<i>d</i>.n,<i>h</i>, <i>inp</i>, <i>out</i>)
Editor.3=<p>The syntax validation was <strong style="color: \#0b780b;">
Editor.4=successful</strong>. Now press the <em>Run</em> button.</p>
Editor.5=Transformed Program
EditorView.10=AM0-Code
EditorView.12=Console
EditorView.13=Options
EditorView.14=Editor
EditorView.15=Do you want to save your program before translation?
EditorView.16=Save
EditorView.17=Load some code to the editor.
EditorView.18=Save your currently edited code.
EditorView.19=Use the code for simulating or tranformating.
EditorView.2=Load
EditorView.20=Validate your code.
EditorView.21=Use AM0 code now.
EditorView.22=Use C0 code now.
EditorView.23=Line: 
EditorView.24=\ Column: 
EditorView.25=New file
EditorView.4=Save
EditorView.6=Validate
EditorView.7=Run
EditorView.9=C0-Code
Equal.0=Stack does not contain 2 or more values.
Equal.1=if <i>d</i>=<i>d</i>.1:<i>d</i>.2:<i>d</i>.3: ... :<i>d</i>.n with n \u2265 2 then (<i>m</i>+1,b:<i>d</i>.3: ... :<i>d</i>.n,<i>h</i>, <i>inp</i>, <i>out</i>)<br />and <i>b</i>=1, if <i>d</i>.2=<i>d</i>.1, and <i>b</i>=0, if <i>d</i>.2\!=<i>d</i>.1,<br />that means for the value true (or false respectively) is 1 (or 0 respectively) pushed to the stack
ErrorEvents.RemoveThisToken=Delete it to correct this error.
ErrorEvents.LexicalAnalysis=Lexical Analysis
ErrorEvents.SyntacticAnalysis=Syntactic Analysis
ErrorEvents.FollowingErrors=The following <strong style="%s">errors</strong> occured during validation:
ErrorEvents.FollowingError=The following <strong style="%s">error</strong> occured during validation:
ErrorEvents.NumberTooLarge=The number <code style="%s">%s</code> at line %d, column %d is too large: the maximum possible value is <code>%d</code>.
ErrorEvents.UnexpectedTokenAt=Unexpected token <code style="%s">"%s"</code> at line %d, column %d.
ErrorEvents.DontKnowWhatToDo=Can't process input <code style="%s">"%s"</code> on line %d.
ErrorEvents.UnexpectedEOF=Unexpected end-of-file at line %d, column %d.
ErrorEvents.UnexpectedEOL=Unexpected end-of-line at line %d, column %d.
ErrorEvents.InsertRelation=Insert one of the relations <code>"=="</code>, <code>"!="</code>, <code>"&gt;="</code>, <code>"&lt;="</code>, <code>"&gt;"</code> or <code>"&lt;"</code> to complete this boolean expression.
ErrorEvents.InsertAmp=Insert "&amp;" to complete this <code>scanf</code> statement.
ErrorEvents.InsertComma=Insert <code>","</code> to correct this error.
ErrorEvents.InsertAssign=Insert <code>"="</code> to correct this error.
ErrorEvents.InsertSemicolon=Insert <code>";"</code> to complete the previous statement.
ErrorEvents.InsertIdent=Insert an identifier to correct this error.
ErrorEvents.InsertNumber=Insert a number to correct this error.
ErrorEvents.InsertNumber_AM0=Insert a number to complete this AM0 statement.
ErrorEvents.InsertSemicolon_AM0=Insert <code>";"</code> to complete this AM0 statement.
GreaterEqual.0=Stack does not contain 2 or more values.
GreaterEqual.1=if <i>d</i>=<i>d</i>.1:<i>d</i>.2:<i>d</i>.3: ... :<i>d</i>.n with n \u2265 2 then (<i>m</i>+1,b:<i>d</i>.3: ... :<i>d</i>.n,<i>h</i>, <i>inp</i>, <i>out</i>)<br />and <i>b</i>=1, if <i>d</i>.2\u2265<i>d</i>.1, and <i>b</i>=0, if <i>d</i>.2<<i>d</i>.1,<br />that means for the value true (or false respectively) is 1 (or 0 respectively) pushed to the stack
GreaterThen.0=Stack does not contain 2 or more values.
GreaterThen.1=if <i>d</i>=<i>d</i>.1:<i>d</i>.2:<i>d</i>.3: ... :<i>d</i>.n with n \u2265 2 then (<i>m</i>+1,b:<i>d</i>.3: ... :<i>d</i>.n,<i>h</i>, <i>inp</i>, <i>out</i>)<br />and <i>b</i>=1, if <i>d</i>.2><i>d</i>.1, and <i>b</i>=0, if <i>d</i>.2\u2264<i>d</i>.1,<br />that means for the value true (or false respectively) is 1 (or 0 respectively) pushed to the stack
JEditor.0=IO Error
JEditor.1=AM0 Program (*.am0)
JEditor.13=IO Error
JEditor.3=C0 Program (*.c0)
JEditor.8=The current code has been modified.\nDo you want to save it?
JEditor.9=Confirm
Jmc.0=Stack does not contain 1 or more values.
Jmc.1=if <i>d</i>=0:<i>d</i>.2: ... :<i>d</i>.n with n \u2265 1 then (<i>e</i>,<i>d</i>.2: ... :<i>d</i>.n,<i>h</i>, <i>inp</i>, <i>out</i>)<br />else (<i>m</i>+1,<i>d</i>.2: ... :<i>d</i>.n,<i>h</i>, <i>inp</i>, <i>out</i>)<br />If the first stack element is 0 (logic false), then the program counter will be set to <i>e</i>.<br />Otherwise the first stack element has an other value (logic true), then the program counter will be incremented.
Jmp.0=(<i>e</i>,<i>d</i>,<i>h</i>, <i>inp</i>, <i>out</i>)
LesserEqual.0=Stack does not contain 2 or more values.
LesserEqual.1=if <i>d</i>=<i>d</i>.1:<i>d</i>.2:<i>d</i>.3: ... :<i>d</i>.n with n \u2265 2 then (<i>m</i>+1,b:<i>d</i>.3: ... :<i>d</i>.n,<i>h</i>, <i>inp</i>, <i>out</i>)<br />and <i>b</i>=1, if <i>d</i>.2\u2264<i>d</i>.1, and <i>b</i>=0, if <i>d</i>.2><i>d</i>.1,<br />that means for the value true (or false respectively) is 1 (or 0 respectively) pushed to the stack
LesserThen.0=Stack does not contain 2 or more values.
LesserThen.1=if <i>d</i>=<i>d</i>.1:<i>d</i>.2:<i>d</i>.3: ... :<i>d</i>.n with n \u2265 2 then (<i>m</i>+1,b:<i>d</i>.3: ... :<i>d</i>.n,<i>h</i>, <i>inp</i>, <i>out</i>)<br />and <i>b</i>=1, if <i>d</i>.2<<i>d</i>.1, and <i>b</i>=0, if <i>d</i>.2\u2265<i>d</i>.1,<br />that means for the value true (or false respectively) is 1 (or 0 respectively) pushed to the stack
Lit.0=(<i>m</i>+1,<i>z</i>:<i>d</i>,<i>h</i>, <i>inp</i>, <i>out</i>)
Load.0=This ram cell is not defined.
Load.1=if <i>h</i>(<i>n</i>) \u220A \u2115 then (<i>m</i>+1,<i>h</i>(<i>n</i>):<i>d</i>,<i>h</i>, <i>inp</i>, <i>out</i>)
Mod.0=Stack does not contain 2 or more values.
Mod.1=if <i>d</i>=<i>d</i>.1:<i>d</i>.2:<i>d</i>.3: ... :<i>d</i>.n with n \u2265 2 then (<i>m</i>+1,(<i>d</i>.2%<i></i>.1):<i>d</i>.3: ... :<i>d</i>.n,<i>h</i>, <i>inp</i>, <i>out</i>)
ModuleInfo.2=Franz Gregor, Martin Morgenstern,\n
ModuleInfo.3=\ Max Leuth\u00E4user, David Voigt, Felix Schmitt
ModuleInfo.5=This module step by step compiles C0 programs to AM0 programs and simulates AM0 programs.
ModuleInfo.8=GNU General Public License. Using icons from the Tango Desktop Project.
Mul.0=Stack does not contain 2 or more values.
Mul.1=if <i>d</i>=<i>d</i>.1:<i>d</i>.2:<i>d</i>.3: ... :<i>d</i>.n with n \u2265 2 then (<i>m</i>+1,(<i>d</i>.2*<i>d</i>.1):<i>d</i>.3: ... :<i>d</i>.n,<i>h</i>, <i>inp</i>, <i>out</i>)
NotEqual.0=Stack does not contain 2 or more values.
NotEqual.1=if <i>d</i>=<i>d</i>.1:<i>d</i>.2:<i>d</i>.3: ... :<i>d</i>.n with n \u2265 2 then (<i>m</i>+1,b:<i>d</i>.3: ... :<i>d</i>.n,<i>h</i>, <i>inp</i>, <i>out</i>)<br />and <i>b</i>=1, if <i>d</i>.2\!=<i>d</i>.1, and <i>b</i>=0, if <i>d</i>.2=<i>d</i>.1,<br />that means for the value true (or false respectively) is 1 (or 0 respectively) pushed to the stack
PresentationAction.0=Toggle presentation mode
Read.0=Target < 0 is not allowed\!
Read.1=Input stream is empty.
Read.2=if <i>inp</i>=<i>first</i>(<i>inp</i>).<i>rest</i>(<i>inp</i>) then (<i>m</i>+1,<i>d</i>,<i>h</i>[<i>n</i>/<i>first</i>(<i>inp</i>)], <i>rest</i>(<i>inp</i>), <i>out</i>)<br />and for every <i>n</i> \u220A \u2124 and <i>w</i> \u220A \u2124<sup>*</sup>: <i>first</i>(<i>n</i>:<i>w</i>)=<i>n</i> and <i>rest</i>(<i>n</i>:<i>w</i>)=<i>w</i>
SimpleExpTrans.0=simpleexptrans: W(<SimpleExpression>) \u00D7 Tab\u2212 \u2192 bProg0
SimulationView.11=Previous
SimulationView.13=Next
SimulationView.15=Clear
SimulationView.17=All in one step
SimulationView.19=Initial Configuration
SimulationView.23=<html>The simulation will stop after a maximum of <b>
SimulationView.24=</b> steps and you have the choice to continue.<html>
SimulationView.26=<html>The simulation will stop after a maximum of <b>
SimulationView.27=</b> steps and you have the choice to continue.<html>
SimulationView.28=\ \ Ask after: 
SimulationView.29=\ steps  
SimulationView.3=AM0-Table
SimulationView.31=Command-Hint
SimulationView.32=Show the first few steps of the simulation
SimulationView.33=Show the last final steps of the simulation
SimulationView.34=Return to the editor.
SimulationView.35=Go one step back.
SimulationView.36=Go one step forward
SimulationView.37=Do the whole simulation in one single step.
SimulationView.38=Enter a specific machine configuration.
SimulationView.39=Clear everything. This will delete your current machine configuration and remove every simulation step\!
SimulationView.4=AM0-Animation
SimulationView.5=To the top of the table
SimulationView.6=To the bottom of the table
SimulationView.7=Not started yet.  
SimulationView.9=Back to Editor
Simulator.0=The was an error while simulating.\n
Simulator.1=The following command could not be executed:\n
Simulator.10=Latest step: 
Simulator.12=<html>&nbsp;&nbsp;Showing steps from <b>
Simulator.13=</b> to <b>
Simulator.14=</b></html>
Simulator.15=\ \ Latest step: 
Simulator.17=\ \ Latest step: 
Simulator.19=\ steps are calculated.\n
Simulator.20=Do you want to continue?\n\n
Simulator.21=Choose 'no' to stop the simulation or 'yes' if you want to go on.
Simulator.22=Simulation
Simulator.23=\ \ Latest step: 
Simulator.25=Not started yet.  
Simulator.3=Reason:\n
Simulator.4=This jump command could not be executed:\n
Simulator.6=Reason:\n
Store.0=Stack does not contain 1 or more values.
Store.1=if <i>d</i>=<i>d</i>.1:<i>d'</i> then (<i>m</i>+1,<i>d'</i>,<i>h</i>[<i>n</i>/<i>d</i>.1], <i>inp</i>, <i>out</i>)<br /><table><tr><td valign='middle'>and <i>h</i>[<i>n</i>/<i>d</i>.1](<i>k</i>)=</td><td><font size='6'>{</font></td><td><i>d</i>.1<br /><i>h</i>(<i>k</i>)</td><td>if k=n<br />otherwise</td></tr></table>
STSeqTrans.0=stseqtrans: W(<StatementSequence>) \u00D7 Tab \u00D7 N\u2217 \u2212 \u2192 bProg0\n\n
STSeqTrans.1=stseqtrans(stat 1 stat 2 . . . stat n , tab, a) :=\n
STSeqTrans.2=\tsttrans(stat 1 , tab, a.1)\n
STSeqTrans.3=\tsttrans(stat 2 , tab, a.2)\n
STSeqTrans.4=\t...\n
STSeqTrans.5=\tsttrans(stat n , tab, a.n)\n
STSeqTrans.6=for all stat 1 , stat 2 , . . . , stat n \u2208 W(<Statement>), tab \u2208 Tab and a \u2208 N\u2217
STSeqTrans.7=It was attempted to translate an empty statement sequence.
STTrans.AssignError=The symbol on the left side of this assignment does not exist or is a constant symbol!
STTrans.ScanfError=The symbol in this scanf statement does not exist or is a constant symbol!
STTrans.PrintfError=The symbol in this printf statement does not exist or is a constant symbol!
STTrans.0=sttrans: W(<Statement>) \u00D7 Tab \u00D7 N\u2217 \u2212 \u2192 bProg0\n\n
STTrans.1=sttrans({ stat 1 stat 2 . . . stat n }, tab, a) :=\n
STTrans.10=sttrans(printf("%d",id);, tab, a) :=\n
STTrans.11=\tif tab(id ) = (var, n) then WRITE n;\n
STTrans.12=\tfor all id \u2208 W( Ident ), tab \u2208 Tab and a \u2208 N\u2217
STTrans.13=sttrans(if ( exp ) stat, tab, a) :=\n
STTrans.14=\tboolexptrans(exp, tab)\n
STTrans.15=\tJMC a.1;\n
STTrans.16=\tsttrans(stat , tab, a.2)\n
STTrans.17=\ta.1:\n
STTrans.18=\tfor all exp \u2208 W( BoolExpression ), stat \u2208 W( Statement ), tab \u2208 Tab\n
STTrans.19=\tand a \u2208 N\u2217
STTrans.2=\tstseqtrans(stat 1 stat 2 . . . stat n , tab, a)\n
STTrans.20=sttrans(if ( exp ) stat 1 else stat 2 , tab, a) :=\n
STTrans.21=\tboolexptrans(exp, tab)\n
STTrans.22=\tJMC a.1;\n
STTrans.23=\tsttrans(stat 1 , tab, a.2)\n
STTrans.24=\tJMP a.3;\n
STTrans.25=\ta.1: sttrans(stat 2 , tab, a.4)\n
STTrans.26=\ta.3:\n
STTrans.27=\tfor all exp \u2208 W( BoolExpression ), stat 1 , stat 2 \u2208 W( Statement ),\n
STTrans.28=\ttab \u2208 Tab and a \u2208 N\u2217
STTrans.29=sttrans(while ( exp ) stat, tab, a) :=\n
STTrans.3=\tfor all stat 1 , stat 2 , . . . , stat n \u2208 W( statement ), tab \u2208 Tab and a \u2208 N\u2217
STTrans.30=\ta.1 : boolexptrans(exp, tab)\n
STTrans.31=\tJMC a.2;\n
STTrans.32=\tsttrans(stat , tab, a.3)\n
STTrans.33=\tJMP a.1;\n
STTrans.34=\ta.2:\n
STTrans.35=\tfor all exp \u2208 W( BoolExpression ), stat \u2208 W( Statement ), tab \u2208 Tab\n
STTrans.36=\tand a \u2208 N\u2217
STTrans.4=sttrans(id = exp;, tab, a) :=\n
STTrans.5=\tif tab(id ) = (var, n) then simpleexptrans(exp, tab) STORE n;
STTrans.6=\tfor all id \u2208 W( Ident ), exp \u2208 W( SimpleExpression ), tab \u2208 Tab and a \u2208 N\u2217
STTrans.7=sttrans(scanf("%i",&id);, tab, a) :=\n
STTrans.8=\tif tab(id ) = (var, n) then READ n;\n
STTrans.9=\tfor all id \u2208 W( Ident ), tab \u2208 Tab and a \u2208 N\u2217
Symbol.0=The memory address must not be < 
Symbol.1=Retrieving the address of a constant symbol is forbidden.
SymbolTable.0=A symbol with id 
SymbolTable.1=\ already exists.
SymbolTable.10=It was attempted to retrieve the value of a non-existent symbol
SymbolTable.11=It was attempted to retrieve the SymbolType of an non-existent symbol
SymbolTable.2=A variable with address 
SymbolTable.3=\ already exists
SymbolTable.9=It was attempted to retrieve the SymbolType of a non-existent symbol
Trans.0=trans: W(<Program>) \u2212 \u2192 bProg0\n\n
Trans.1=trans( \#include <stdio.h> int main() block ) := blocktrans(block) for all block \u2208 W(<Block>)
TransformationView.0=Type
TransformationView.1=ID
TransformationView.10=Apply
TransformationView.12=Apply all
TransformationView.14=Simulate
TransformationView.16=Back to Editor
TransformationView.18=Definition / Rule
TransformationView.19=Preview
TransformationView.2=Address
TransformationView.25=Do you want to transmit the even translated program into the editor?
TransformationView.26=Transmit
TransformationView.3=tab(ID)
TransformationView.32=Error
TransformationView.33=Applying all is not possible in state FINISHED. Internal program error\!
TransformationView.34=Error
TransformationView.35=Error
TransformationView.4=Error
TransformationView.40=Return to the editor.
TransformationView.41=Go one step back.
TransformationView.42=Go one step forward and apply the selected transform function
TransformationView.43=Do the whole transformation in one single step.
TransformationView.44=Transfer the resulting AM0 code to the simulator.
TransformationView.5=Error
TransformationView.6=Error
TransformationView.8=One step back
Transformator.0=Error
Transformator.1=This functions is atomic and cannot be transformed anymore.
Transformator.11=Error
Transformator.12=The transformation finished successfully.
Transformator.13=Transformation finished
Transformator.15=This index points to a TransformFunction which cannot be applied.\n
Transformator.2=Invalid transformation
Transformator.3=There is no TransformFunction at index 
Transformator.5=This functions is atomic and cannot be transformed anymore.
Transformator.6=Invalid transformation
Transformator.7=Error
Transformator.8=The transformation finished successfully.
Transformator.9=Transformation finished
TransformFunction.0=abstract transform function
Write.0=This ram cell is not defined.
Write.1=if <i>h</i> \u220A \u2124 then (<i>m</i>+1,<i>d</i>,<i>h</i>, <i>inp</i>, <i>out</i>:<i>h</i>(<i>n</i>))
Sub.0=Stack does not contain 2 or more values.
Sub.1=if <i>d</i>=<i>d</i>.1:<i>d</i>.2:<i>d</i>.3: ... :<i>d</i>.n with n \u2265 2 then (<i>m</i>+1,(<i>d</i>.2-<i>d</i>.1):<i>d</i>.3: ... :<i>d</i>.n,<i>h</i>, <i>inp</i>, <i>out</i>)
